name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: water-quality-ml
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8
        
    - name: Lint with flake8
      run: |
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for DVC
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Setup DVC
      run: |
        pip install dvc[s3]
        dvc remote modify origin access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        dvc remote modify origin secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    - name: Pull DVC data
      run: |
        dvc pull
        
    - name: Run ML pipeline
      env:
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
      run: |
        dvc repro
        
    - name: Push DVC changes
      run: |
        dvc push
        
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push Docker image
      run: |
        docker build -f app/Dockerfile -t $ECR_REPOSITORY:$GITHUB_SHA -t $ECR_REPOSITORY:latest .
        docker tag $ECR_REPOSITORY:$GITHUB_SHA ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$GITHUB_SHA
        docker tag $ECR_REPOSITORY:$GITHUB_SHA ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:latest
        docker push ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$GITHUB_SHA
        docker push ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:latest
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Stop existing container
          docker stop water-quality-api || true
          docker rm water-quality-api || true
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          
          # Pull and run new image
          docker pull ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker run -d --name water-quality-api -p 8000:8000 \
            -e MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }} \
            -e MLFLOW_TRACKING_USERNAME=${{ secrets.MLFLOW_USERNAME }} \
            -e MLFLOW_TRACKING_PASSWORD=${{ secrets.MLFLOW_PASSWORD }} \
            ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest