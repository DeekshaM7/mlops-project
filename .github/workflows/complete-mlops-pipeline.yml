name: Complete MLOps Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: water-quality-ml
  MODEL_NAME: water-potability-classifier
  PYTHON_VERSION: '3.12'

jobs:
  # Stage 1: Code Quality & Testing
  code-quality:
    name: Code Quality & Unit Tests
    runs-on: ubuntu-latest
    outputs:
      commit-hash: ${{ steps.commit.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit hash
        id: commit
        run: echo "hash=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov bandit safety

      - name: Code formatting check
        run: ruff format --check src app tests

      - name: Linting
        run: ruff check src app tests --output-format=github

      - name: Security scan
        run: |
          bandit -r src app -f json -o security-report.json || true
          safety check --json --output safety-report.json || true

      - name: Unit tests with coverage
        run: |
          python -m pytest tests/ -v --cov=src --cov=app --cov-report=xml --cov-report=html

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage.xml
            htmlcov/
            security-report.json
            safety-report.json

  # Stage 2: Data Pipeline Validation
  data-validation:
    name: Data Pipeline & Model Training
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.ref == 'refs/heads/master' || contains(github.event.head_commit.message, '[run-pipeline]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup DVC
        run: |
          dvc remote modify origin access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          dvc remote modify origin secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Pull DVC data
        run: dvc pull

      - name: Data validation
        run: |
          python -m src.data.validate --input data/raw/water_potability.csv
          python -m src.data.drift_detection --reference data/processed/train.csv --current data/processed/val.csv

      - name: Run ML pipeline with MLflow tracking
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
        run: |
          export MLFLOW_EXPERIMENT_NAME="water-potability-ci-${{ needs.code-quality.outputs.commit-hash }}"
          dvc repro

      - name: Model validation & benchmarking
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
        run: |
          python -m src.models.validate --model-path app/model_registry/model.joblib
          python -m src.models.benchmark --current-model app/model_registry/model.joblib

      - name: Push DVC changes
        run: dvc push

      - name: Upload model artifacts
        uses: actions/upload-artifact@v3
        with:
          name: model-artifacts-${{ needs.code-quality.outputs.commit-hash }}
          path: |
            app/model_registry/
            artifacts/
            data/processed/transformer.joblib

  # Stage 3: Container Build & Security Scan
  build-container:
    name: Build & Scan Container
    runs-on: ubuntu-latest
    needs: [code-quality, data-validation]
    if: always() && needs.code-quality.result == 'success'
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download model artifacts
        if: needs.data-validation.result == 'success'
        uses: actions/download-artifact@v3
        with:
          name: model-artifacts-${{ needs.code-quality.outputs.commit-hash }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        id: build
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ needs.code-quality.outputs.commit-hash }}
        run: |
          # Build multi-stage production image
          docker build -f docker/Dockerfile.prod \
            --target production \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --build-arg GIT_COMMIT=${{ github.sha }} \
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") .
          
          echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Container security scan
        run: |
          # Install Trivy
          sudo apt-get update && sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install trivy
          
          # Scan image
          trivy image --format json --output container-scan.json ${{ steps.build.outputs.image-uri }}

      - name: Container integration tests
        run: |
          # Start container for testing
          docker run -d --name test-container -p 8000:8000 ${{ steps.build.outputs.image-uri }}
          sleep 30
          
          # Health check
          curl -f http://localhost:8000/ || exit 1
          
          # API tests
          python tests/integration/test_api.py
          
          # Cleanup
          docker stop test-container

      - name: Push to ECR
        if: github.ref == 'refs/heads/master'
        run: |
          docker push ${{ steps.build.outputs.image-uri }}
          docker push ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Upload container scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-scan-${{ needs.code-quality.outputs.commit-hash }}
          path: container-scan.json

  # Stage 4: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, data-validation, build-container]
    if: github.ref == 'refs/heads/master'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Deploy script
            cd /opt/mlops-staging
            
            # Pull latest deployment scripts
            git pull origin master
            
            # Update environment variables
            export IMAGE_URI=${{ needs.build-container.outputs.image-uri }}
            export MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}
            export AWS_REGION=${{ env.AWS_REGION }}
            
            # Run deployment
            ./scripts/deploy.sh staging $IMAGE_URI

      - name: Run smoke tests
        run: |
          sleep 60  # Wait for deployment
          python tests/smoke/test_staging.py --base-url ${{ secrets.STAGING_URL }}

      - name: Setup monitoring
        run: |
          # Deploy CloudWatch dashboards and alarms
          aws cloudformation deploy \
            --template-file infrastructure/monitoring.yaml \
            --stack-name mlops-monitoring-staging \
            --parameter-overrides \
              Environment=staging \
              ApplicationName=${{ env.ECR_REPOSITORY }} \
              NotificationEmail=${{ secrets.NOTIFICATION_EMAIL }}

  # Stage 5: Production Deployment (Manual Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, data-validation, build-container, deploy-staging]
    if: github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Blue-Green deployment to production
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /opt/mlops-production
            
            # Blue-Green deployment
            export IMAGE_URI=${{ needs.build-container.outputs.image-uri }}
            export MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}
            
            # Deploy to green environment
            ./scripts/blue-green-deploy.sh $IMAGE_URI

      - name: Production health checks
        run: |
          python tests/smoke/test_production.py --base-url ${{ secrets.PROD_URL }}

      - name: Setup production monitoring
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/monitoring.yaml \
            --stack-name mlops-monitoring-production \
            --parameter-overrides \
              Environment=production \
              ApplicationName=${{ env.ECR_REPOSITORY }} \
              NotificationEmail=${{ secrets.NOTIFICATION_EMAIL }}

  # Stage 6: Model Governance & Audit
  governance:
    name: Model Governance & Audit Trail
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate model card
        run: |
          python -m governance.generate_model_card \
            --model-name ${{ env.MODEL_NAME }} \
            --version ${{ needs.code-quality.outputs.commit-hash }} \
            --commit-hash ${{ github.sha }}

      - name: Update model registry
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}
        run: |
          python -m governance.update_registry \
            --model-name ${{ env.MODEL_NAME }} \
            --version ${{ needs.code-quality.outputs.commit-hash }} \
            --stage Production \
            --deployment-url ${{ secrets.PROD_URL }}

      - name: Bias and fairness evaluation
        run: |
          python -m governance.bias_evaluation \
            --model-path app/model_registry/model.joblib \
            --test-data data/processed/test.csv

      - name: Generate compliance report
        run: |
          python -m governance.compliance_report \
            --model-name ${{ env.MODEL_NAME }} \
            --version ${{ needs.code-quality.outputs.commit-hash }}

      - name: Upload governance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: governance-${{ needs.code-quality.outputs.commit-hash }}
          path: |
            governance/reports/
            governance/model-cards/